<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Niunan.Utility</name>
    </assembly>
    <members>
        <member name="T:Niunan.Utility.HttpHelper">
            <summary>
            Http连接操作帮助类
            </summary>
        </member>
        <member name="M:Niunan.Utility.HttpHelper.GetHtml(Niunan.Utility.HttpItem)">
            <summary>
            根据相传入的数据，得到相应页面数据
            </summary>
            <param name="item">参数类对象</param>
            <returns>返回HttpResult类型</returns>
        </member>
        <member name="M:Niunan.Utility.HttpHelper.GetData(Niunan.Utility.HttpItem,Niunan.Utility.HttpResult)">
            <summary>
            获取数据的并解析的方法
            </summary>
            <param name="item"></param>
            <param name="result"></param>
        </member>
        <member name="M:Niunan.Utility.HttpHelper.SetEncoding(Niunan.Utility.HttpItem,Niunan.Utility.HttpResult,System.Byte[])">
            <summary>
            设置编码
            </summary>
            <param name="item">HttpItem</param>
            <param name="result">HttpResult</param>
            <param name="ResponseByte">byte[]</param>
        </member>
        <member name="M:Niunan.Utility.HttpHelper.GetByte">
            <summary>
            提取网页Byte
            </summary>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.HttpHelper.GetMemoryStream(System.IO.Stream)">
            <summary>
            4.0以下.net版本取数据使用
            </summary>
            <param name="streamResponse">流</param>
        </member>
        <member name="M:Niunan.Utility.HttpHelper.SetRequest(Niunan.Utility.HttpItem)">
             <summary>
             为请求准备参数
             </summary>
            <param name="item">参数列表</param>
        </member>
        <member name="M:Niunan.Utility.HttpHelper.SetCer(Niunan.Utility.HttpItem)">
            <summary>
            设置证书
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Niunan.Utility.HttpHelper.SetCerList(Niunan.Utility.HttpItem)">
            <summary>
            设置多个证书
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Niunan.Utility.HttpHelper.SetCookie(Niunan.Utility.HttpItem)">
            <summary>
            设置Cookie
            </summary>
            <param name="item">Http参数</param>
        </member>
        <member name="M:Niunan.Utility.HttpHelper.SetPostData(Niunan.Utility.HttpItem)">
            <summary>
            设置Post数据
            </summary>
            <param name="item">Http参数</param>
        </member>
        <member name="M:Niunan.Utility.HttpHelper.SetProxy(Niunan.Utility.HttpItem)">
            <summary>
            设置代理
            </summary>
            <param name="item">参数对象</param>
        </member>
        <member name="M:Niunan.Utility.HttpHelper.CheckValidationResult(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            回调验证证书问题
            </summary>
            <param name="sender">流对象</param>
            <param name="certificate">证书</param>
            <param name="chain">X509Chain</param>
            <param name="errors">SslPolicyErrors</param>
            <returns>bool</returns>
        </member>
        <member name="T:Niunan.Utility.HttpItem">
            <summary>
            Http请求参考类
            </summary>
        </member>
        <member name="P:Niunan.Utility.HttpItem.URL">
            <summary>
            请求URL必须填写
            </summary>
        </member>
        <member name="P:Niunan.Utility.HttpItem.Method">
            <summary>
            请求方式默认为GET方式,当为POST方式时必须设置Postdata的值
            </summary>
        </member>
        <member name="P:Niunan.Utility.HttpItem.Timeout">
            <summary>
            默认请求超时时间
            </summary>
        </member>
        <member name="P:Niunan.Utility.HttpItem.ReadWriteTimeout">
            <summary>
            默认写入Post数据超时间
            </summary>
        </member>
        <member name="P:Niunan.Utility.HttpItem.KeepAlive">
            <summary>
             获取或设置一个值，该值指示是否与 Internet 资源建立持久性连接默认为true。
            </summary>
        </member>
        <member name="P:Niunan.Utility.HttpItem.Accept">
            <summary>
            请求标头值 默认为text/html, application/xhtml+xml, */*
            </summary>
        </member>
        <member name="P:Niunan.Utility.HttpItem.ContentType">
            <summary>
            请求返回类型默认 text/html
            </summary>
        </member>
        <member name="P:Niunan.Utility.HttpItem.UserAgent">
            <summary>
            客户端访问信息默认Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)
            </summary>
        </member>
        <member name="P:Niunan.Utility.HttpItem.Encoding">
            <summary>
            返回数据编码默认为NUll,可以自动识别,一般为utf-8,gbk,gb2312
            </summary>
        </member>
        <member name="P:Niunan.Utility.HttpItem.PostDataType">
            <summary>
            Post的数据类型
            </summary>
        </member>
        <member name="P:Niunan.Utility.HttpItem.Postdata">
            <summary>
            Post请求时要发送的字符串Post数据
            </summary>
        </member>
        <member name="P:Niunan.Utility.HttpItem.PostdataByte">
            <summary>
            Post请求时要发送的Byte类型的Post数据
            </summary>
        </member>
        <member name="P:Niunan.Utility.HttpItem.WebProxy">
            <summary>
            设置代理对象，不想使用IE默认配置就设置为Null，而且不要设置ProxyIp
            </summary>
        </member>
        <member name="P:Niunan.Utility.HttpItem.CookieCollection">
            <summary>
            Cookie对象集合
            </summary>
        </member>
        <member name="P:Niunan.Utility.HttpItem.Cookie">
            <summary>
            请求时的Cookie
            </summary>
        </member>
        <member name="P:Niunan.Utility.HttpItem.Referer">
            <summary>
            来源地址，上次访问地址
            </summary>
        </member>
        <member name="P:Niunan.Utility.HttpItem.CerPath">
            <summary>
            证书绝对路径
            </summary>
        </member>
        <member name="P:Niunan.Utility.HttpItem.IsToLower">
            <summary>
            是否设置为全文小写，默认为不转化
            </summary>
        </member>
        <member name="P:Niunan.Utility.HttpItem.Allowautoredirect">
            <summary>
            支持跳转页面，查询结果将是跳转后的页面，默认是不跳转
            </summary>
        </member>
        <member name="P:Niunan.Utility.HttpItem.Connectionlimit">
            <summary>
            最大连接数
            </summary>
        </member>
        <member name="P:Niunan.Utility.HttpItem.ProxyUserName">
            <summary>
            代理Proxy 服务器用户名
            </summary>
        </member>
        <member name="P:Niunan.Utility.HttpItem.ProxyPwd">
            <summary>
            代理 服务器密码
            </summary>
        </member>
        <member name="P:Niunan.Utility.HttpItem.ProxyIp">
            <summary>
            代理 服务IP ,如果要使用IE代理就设置为ieproxy
            </summary>
        </member>
        <member name="P:Niunan.Utility.HttpItem.ResultType">
            <summary>
            设置返回类型String和Byte
            </summary>
        </member>
        <member name="P:Niunan.Utility.HttpItem.Header">
            <summary>
            header对象
            </summary>
        </member>
        <!-- 已忽略成員 "P:Niunan.Utility.HttpItem.ProtocolVersion" 中格式錯誤的 XML 註解 -->
        <member name="P:Niunan.Utility.HttpItem.Expect100Continue">
            <summary>
             获取或设置一个 System.Boolean 值，该值确定是否使用 100-Continue 行为。如果 POST 请求需要 100-Continue 响应，则为 true；否则为 false。默认值为 true。
            </summary>
        </member>
        <member name="P:Niunan.Utility.HttpItem.ClentCertificates">
            <summary>
            设置509证书集合
            </summary>
        </member>
        <member name="P:Niunan.Utility.HttpItem.PostEncoding">
            <summary>
            设置或获取Post参数编码,默认的为Default编码
            </summary>
        </member>
        <member name="P:Niunan.Utility.HttpItem.ResultCookieType">
            <summary>
            Cookie返回类型,默认的是只返回字符串类型
            </summary>
        </member>
        <member name="P:Niunan.Utility.HttpItem.ICredentials">
            <summary>
            获取或设置请求的身份验证信息。
            </summary>
        </member>
        <member name="F:Niunan.Utility.HttpItem._MaximumAutomaticRedirections">
            <summary>
            设置请求将跟随的重定向的最大数目
            </summary>
        </member>
        <member name="P:Niunan.Utility.HttpItem.IfModifiedSince">
            <summary>
            获取和设置IfModifiedSince，默认为当前日期和时间
            </summary>
        </member>
        <member name="T:Niunan.Utility.HttpResult">
            <summary>
            Http返回参数类
            </summary>
        </member>
        <member name="P:Niunan.Utility.HttpResult.Cookie">
            <summary>
            Http请求返回的Cookie
            </summary>
        </member>
        <member name="P:Niunan.Utility.HttpResult.CookieCollection">
            <summary>
            Cookie对象集合
            </summary>
        </member>
        <member name="P:Niunan.Utility.HttpResult.Html">
            <summary>
            返回的String类型数据 只有ResultType.String时才返回数据，其它情况为空
            </summary>
        </member>
        <member name="P:Niunan.Utility.HttpResult.ResultByte">
            <summary>
            返回的Byte数组 只有ResultType.Byte时才返回数据，其它情况为空
            </summary>
        </member>
        <member name="P:Niunan.Utility.HttpResult.Header">
            <summary>
            header对象
            </summary>
        </member>
        <member name="P:Niunan.Utility.HttpResult.StatusDescription">
            <summary>
            返回状态说明
            </summary>
        </member>
        <member name="P:Niunan.Utility.HttpResult.StatusCode">
            <summary>
            返回状态码,默认为OK
            </summary>
        </member>
        <member name="T:Niunan.Utility.ResultType">
            <summary>
            返回类型
            </summary>
        </member>
        <member name="F:Niunan.Utility.ResultType.String">
            <summary>
            表示只返回字符串 只有Html有数据
            </summary>
        </member>
        <member name="F:Niunan.Utility.ResultType.Byte">
            <summary>
            表示返回字符串和字节流 ResultByte和Html都有数据返回
            </summary>
        </member>
        <member name="T:Niunan.Utility.PostDataType">
            <summary>
            Post的数据格式默认为string
            </summary>
        </member>
        <member name="F:Niunan.Utility.PostDataType.String">
            <summary>
            字符串类型，这时编码Encoding可不设置
            </summary>
        </member>
        <member name="F:Niunan.Utility.PostDataType.Byte">
            <summary>
            Byte类型，需要设置PostdataByte参数的值编码Encoding可设置为空
            </summary>
        </member>
        <member name="F:Niunan.Utility.PostDataType.FilePath">
            <summary>
            传文件，Postdata必须设置为文件的绝对路径，必须设置Encoding的值
            </summary>
        </member>
        <member name="T:Niunan.Utility.ResultCookieType">
            <summary>
            Cookie返回类型
            </summary>
        </member>
        <member name="F:Niunan.Utility.ResultCookieType.String">
            <summary>
            只返回字符串类型的Cookie
            </summary>
        </member>
        <member name="F:Niunan.Utility.ResultCookieType.CookieCollection">
            <summary>
            CookieCollection格式的Cookie集合同时也返回String类型的cookie
            </summary>
        </member>
        <member name="M:Niunan.Utility.DataTableRenderToExcel.RenderDataTableFromExcel(System.String)">
            <summary>读取excel
            默认第一行为标头
            </summary>
            <param name="path">excel文档路径</param>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.DataTableRenderToExcel.RenderDataTableFromExcel(System.String,System.Int32)">
            <summary>读取excel
            默认第一行为标头
            </summary>
            <param name="path">excel文档路径</param>
            <param name="sheetnum">第几个sheet，从0开始</param>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.DataTableRenderToExcel.RenderDataTableFromExcel(System.String,System.String)">
            <summary>读取excel
            默认第一行为标头
            </summary>
            <param name="path">excel文档路径</param>
            <param name="sheetname">sheet名称</param>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.DataTableRenderToExcel.GetExcelSheet(System.String)">
            <summary>获取excel中sheet的集合
            
            </summary>
            <param name="filepath"></param>
            <returns></returns>
        </member>
        <member name="T:Niunan.Utility.IPSearch">
            <summary>
             提供从纯真IP数据库搜索IP信息的方法；
             感谢LumaQQ提供纯真IP数据库格式文档；
             ----HeDaode 2007-12-28 四川教育学院
            </summary>
        </member>
        <member name="M:Niunan.Utility.IPSearch.#ctor(System.String)">
            <summary>
             构造函数
            </summary>
            <param name="ipfilePath">纯真IP数据库路径</param>
        </member>
        <member name="T:Niunan.Utility.IPSearch.IPLocation">
            <summary>
             地理位置,包括国家和地区
            </summary>
        </member>
        <member name="M:Niunan.Utility.IPSearch.GetIPLocation(System.String)">
            <summary>
             获取指定IP所在地理位置
            </summary>
            <param name="strIP">要查询的IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.IPSearch.IPToLong(System.String)">
            <summary>
             将字符串形式的IP转换位long
            </summary>
            <param name="strIP"></param>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.IPSearch.BlockToArray(System.Byte[])">
            <summary>
             将索引区字节块中的起始IP转换成Long数组
            </summary>
            <param name="ipBlock"></param>
        </member>
        <member name="M:Niunan.Utility.IPSearch.SearchIP(System.Int64[],System.Int32,System.Int32)">
            <summary>
             从IP数组中搜索指定IP并返回其索引
            </summary>
            <param name="ipArray">IP数组</param>
            <param name="start">指定搜索的起始位置</param>
            <param name="end">指定搜索的结束位置</param>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.IPSearch.ReadIPBlock">
            <summary>
             读取IP文件中索引区块
            </summary>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.IPSearch.ReadLongX(System.Int32)">
            <summary>
             从IP文件中读取指定字节并转换位long
            </summary>
            <param name="bytesCount">需要转换的字节数，主意不要超过8字节</param>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.IPSearch.ReadString(System.Int32)">
            <summary>
             从IP文件中读取字符串
            </summary>
            <param name="flag">转向标志</param>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.StrToPinyin.GetChineseSpell(System.String)">
            <summary>鳳腕珨跺趼睫揹腔犖逄秞忑趼譫
             
            </summary> 
            <param name="strText">趼睫揹</param> 
            <returns>犖逄秞鎢,蜆趼睫揹硐婦漪湮迡腔荎恅趼譫</returns> 
        </member>
        <member name="T:Niunan.Utility.Tool">
            <summary>牛腩公用类库
            
            </summary>
        </member>
        <member name="M:Niunan.Utility.Tool.CopyFolder(System.String,System.String)">
            <summary>
            Copy文件夹
            </summary>
            <param name="sPath">源文件夹路径</param>
            <param name="dPath">目的文件夹路径</param>
            <returns>完成状态：success-完成；其他-报错</returns>
        </member>
        <member name="M:Niunan.Utility.Tool.CombineByte(System.Byte[][])">
            <summary>
            多个字节数组合并
            </summary>
            <param name="arrays"></param>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.Tool.BindDDL``1(System.Web.UI.WebControls.DropDownList,System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            绑定ddl控件，数据源是一个IEnumerator，
            </summary>
            <param name="ddlxz">下拉框控件</param>
            <param name="list">数据源</param>
            <param name="textfield">text字段</param>
            <param name="valuefield">value字段</param>
        </member>
        <!-- 已忽略成員 "M:Niunan.Utility.Tool.SubByte(System.Byte[],System.Int32,System.Int32)" 中格式錯誤的 XML 註解 -->
        <!-- 已忽略成員 "M:Niunan.Utility.Tool.GetValueByKeyFromUrlParam(System.String,System.String)" 中格式錯誤的 XML 註解 -->
        <member name="M:Niunan.Utility.Tool.ToBytesByString(System.String)">
            <summary>把一串字符弄成byte[]字节数组返回
            传入的示例：68 31 00 31 00 68 c9 76 45 74 bf 0c 02 70 00 00 01 00 36 16
            必须是十六进制，中间用一个空格隔开
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.Tool.ToStringByBytes(System.Byte[])">
            <summary>把字节数组转为字符串
            输出如：68 31 00 31 00 68 c9 76 45 74 bf 0c 02 70 00 00 01 00 36 16
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.Tool.GetNearDateByXingQiInt(System.Int32)">
            <summary>根据传入的星期几的整型取最近的日期
            如传入0 ，返回最近星期日的日期
            </summary>
            <param name="xingqi">1，2，3，4，5，6，0</param>
            <returns></returns>
        </member>
        <!-- 已忽略成員 "M:Niunan.Utility.Tool.DateFormatToString(System.DateTime)" 中格式錯誤的 XML 註解 -->
        <member name="M:Niunan.Utility.Tool.GetTime(System.String)">
            <summary>  
            时间戳转为C#格式时间  
            </summary>  
            <param name="timeStamp">Unix时间戳格式（10位）</param>  
            <returns>C#格式时间</returns>  
        </member>
        <member name="M:Niunan.Utility.Tool.ConvertDateTimeInt(System.DateTime)">
            <summary>  
            DateTime时间格式转换为Unix时间戳格式  （10位）
            </summary>  
            <param name="time"> DateTime时间格式</param>  
            <returns>Unix时间戳格式</returns>  
        </member>
        <member name="M:Niunan.Utility.Tool.ConvertDateTimeInt_13(System.DateTime)">
            <summary>  
            DateTime时间格式转换为Unix时间戳格式  （13位）
            </summary>  
            <param name="time"> DateTime时间格式</param>  
            <returns>Unix时间戳格式</returns>  
        </member>
        <member name="M:Niunan.Utility.Tool.GetTime_13(System.String)">
            <summary>  
            时间戳转为C#格式时间  
            </summary>  
            <param name="timeStamp">Unix时间戳格式（10位）</param>  
            <returns>C#格式时间</returns>  
        </member>
        <member name="M:Niunan.Utility.Tool.IsMobileBrowser">
            <summary>
            是否是移动浏览器
            daniel.xiaofei@gmail.com
            2013-05-13
            </summary>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.Tool.GetBaiduMapJWDByAddress(System.String,System.String,System.String@,System.String@)">
            <summary>根据地址获取百度地图的经纬度
            http://developer.baidu.com/map/index.php?title=webapi/guide/webservice-geocoding
            </summary>
            <param name="baidu_ak">百度AK</param>
            <param name="address">地址，如：南宁淡村市场</param>
            <param name="lng">取到的经度，取不到则是空字符串</param>
            <param name="lat">取到的纬度，取不到则是空字符串</param>
        </member>
        <member name="P:Niunan.Utility.Tool.Baidu_Location.lng">
            <summary>
            经度
            </summary>
        </member>
        <member name="P:Niunan.Utility.Tool.Baidu_Location.lat">
            <summary>
            纬度
            </summary>
        </member>
        <member name="M:Niunan.Utility.Tool.ExportWord(System.String)">
            <summary>导出word, 只用于导出网页内容为word
            
            </summary>
            <param name="bodyhtml">html代码,如果有样式也直接写在里面</param>
        </member>
        <member name="M:Niunan.Utility.Tool.GetIPAddress(System.String,System.String)">
            <summary>取IP地址所对应的地方
            查询IP纯真库
            </summary>
            <param name="ip">ip地址</param>
            <param name="ipfilePath">qqwry.dat的绝对路径</param>        
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.Tool.SavePhotoFromUrl(System.String,System.String)">
            <summary>保存网络上的地址到本地
            以二进制的方式从网上下载下来
            </summary>
            <param name="FileName">本地全路径 ，如：d:/aaa.jpg</param>
            <param name="Url">网络地址，如：http://aaa.com/aaa.jpg </param>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.Tool.GetAddressIP_CS">
            <summary>
            CS客户端获取本地IP地址信息
            </summary>
        </member>
        <member name="M:Niunan.Utility.Tool.GetMAC">
            <summary>取用户的网卡MAC地址
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.Tool.GetDescription(System.String,System.String,System.String)">
            <summary>取属性或方法的注释说明
            必须是[Description("注释说明")]这样的才能取到
            </summary>
            <param name="classname">类名,包含命名空间,如:JiuFen.Today.Web.niunan_aaa</param>
            <param name="pmname">属性或方法名</param>
            <param name="op">属性还是方法, p属性m方法,默认m</param>
        </member>
        <member name="M:Niunan.Utility.Tool.GetRealIP">
            <summary>取真实IP地址
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.Tool.ConvertToGB(System.String)">
            <summary>把Unicode解码为普通文字
            
            </summary>
            <param name="unicodeString">要解码的Unicode字符集</param>
            <returns>解码后的字符串</returns>
        </member>
        <member name="M:Niunan.Utility.Tool.ConvertToUnicode(System.String)">
            <summary>把汉字字符转码为Unicode字符集
            
            </summary>
            <param name="strGB">要转码的字符</param>
            <returns>转码后的字符</returns>
        </member>
        <member name="M:Niunan.Utility.Tool.GetHostUrl">
            <summary>取当前主机地址
             如：http://niunan.net:80/   
             注意最后是没有/
            </summary>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.Tool.GetXingQi(System.DateTime)">
            <summary>根据日期取是星期几
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.Tool.GetNextXingQi(System.Int32)">
            <summary>取下一个星期几
            例：今天星期三，传入4，则会取明天星期四的日期
            传入3，则会返回下星期的星期三的日期
            传入2，则会返回下星期二的日期
            </summary>
            <param name="xingqi">0表示星期天</param>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.Tool.Alert(System.String,System.Web.UI.Page)">
            <summary>后台执行alert弹出对话框
            
            </summary>
            <param name="_Msg">警告字串</param>
            <param name="_Page">this.Page</param>
            <returns>警告框JS</returns>
        </member>
        <member name="M:Niunan.Utility.Tool.AlertAndGo(System.String,System.String,System.Web.UI.Page)">
            <summary>后台执行alert后跳转到新页面
            
            </summary>
            <param name="_msg">提示框中的字符串</param>
            <param name="_href">跳转的页面</param>
            <param name="_page">this.Page</param>
        </member>
        <member name="M:Niunan.Utility.Tool.AlertAndGo_MVC(System.String,System.String)">
            <summary>后台执行alert后跳转到新页面,用于MVC
            
            </summary>
            <param name="_msg">提示框中的字符串</param>
            <param name="_href">跳转的页面</param>
            <param name="_page">this.Page</param>
        </member>
        <member name="M:Niunan.Utility.Tool.AlertAndCloseWin_MVC(System.String)">
            <summary>后台执行alert后关闭页面,用于MVC
            
            </summary>
            <param name="_msg">提示框中的字符串</param> 
        </member>
        <member name="M:Niunan.Utility.Tool.GetImgWH(System.String,System.Int32@,System.Int32@)">
            <summary>根据传入的图片路径获取宽度和高度
            
            </summary>
            <param name="img">图片绝对路径，传入如：d:/aweb/upload/20140303/fdas.jpg</param>
            <param name="w">返回的宽度宽度</param>
            <param name="h">返回的高度</param>
        </member>
        <member name="M:Niunan.Utility.Tool.CreateImage(System.String,System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>创建规定大小的图像   源图像只能是JPG格式和PNG格式
            生成的图片默认背景是白色
            </summary>
            <param name="oPath">源图像绝对路径</param>
            <param name="tPath">生成图像绝对路径</param>
            <param name="width">生成图像的宽度</param>
            <param name="height">生成图像的高度</param>
            <param name="color">颜色，默认是白色，如：white,black</param>
            <param name="scale">是否拉伸，yes|no，默认no,如果是yes则会把整个画布填充满，此时color属性无效,生成出来的图像会变形</param>
        </member>
        <member name="M:Niunan.Utility.Tool.ZoomImage(System.String,System.String,System.Int32,System.String,System.Int32@)">
            <summary>按比例缩放图片
            
            </summary>
            <param name="oPath">源图像绝对路径</param>
            <param name="tPath">生成图像绝对路径</param>
            <param name="wh">数值</param>
            <param name="op">按宽度还是高度进行等比缩放，width or height</param>
            <param name="other_wh">另一个宽度或者高度值的输出</param>
        </member>
        <member name="M:Niunan.Utility.Tool.ZoomImage(System.String,System.String,System.Int32,System.String)">
            <summary>按比例缩放图片
            
            </summary>
            <param name="oPath">源图像绝对路径</param>
            <param name="tPath">生成图像绝对路径</param>
            <param name="wh">数值</param>
            <param name="op">按宽度还是高度进行等比缩放,width or height</param>
        </member>
        <member name="M:Niunan.Utility.Tool.ExecJS(System.String,System.Web.UI.Page)">
            <summary>后台执行JS
            
            </summary>
            <param name="js">JS代码</param>
            <param name="_Page">this.Page</param>
        </member>
        <member name="M:Niunan.Utility.Tool.GetApplicationPath">
            <summary>返回当前应用程序虚拟路径的根路径
            在网上则返回/，本地则返回/5mdn，本地返回的要在最后加个/，即返回/5mdn/
            </summary>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.Tool.GenEmabed(System.String)">
            <summary>根据视频地址生成相应的emabed标签
            
            </summary>
            <param name="url">允许：.swf .flv .mp3 .wav .wma .wmv .mid .avi .mpg .asf .rm .rmvb</param>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.Tool.GetNoHTMLString(System.String)">
              <summary>去除HTML标记    
                 
              </summary>   
              <param    name="NoHTML">包括HTML的源码</param>   
              <returns>已经去除后的文字</returns>   
        </member>
        <member name="M:Niunan.Utility.Tool.GetSafeHTMLString(System.String)">
            <summary>获取显示的字符串，可显示HTML标签，但把危险的HTML标签过滤，如iframe,script等。  
              
            </summary>  
            <param name="str">未处理的字符串</param>  
            <returns></returns>  
        </member>
        <member name="M:Niunan.Utility.Tool.GetSafeSQL(System.String)">
            <summary>过滤SQL非法字符串
            字符串长度不能超过20个,把前后空格都去除
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.Tool.HiddenIP(System.String)">
            <summary>隐藏IP最后一位
            
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.Tool.MD5(System.String)">
            <summary>MD5加密字符串
            
            </summary>
            <param name="str">原字符串</param>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.Tool.SHA1(System.String)">
            <summary>SHA1加密字符串
            
            </summary>
            <param name="str">原字符串</param>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.Tool.SendMail(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>发送email,默认是25端口
            
            </summary>
            <param name="title">邮件标题</param>
            <param name="body">邮件内容</param>
            <param name="toAdress">收件人</param>
            <param name="fromAdress">发件人</param>
            <param name="userName">发件用户名</param>
            <param name="userPwd">发件密码</param>
            <param name="smtpHost">smtp地址</param>
        </member>
        <member name="M:Niunan.Utility.Tool.Upload(System.Web.UI.WebControls.FileUpload,System.String[],System.Int32,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>上传文件方法，默认生成日期文件夹
            返回文件名
            </summary>
            <param name="myFileUpload">上传控件ID</param>
            <param name="allowExtensions">允许上传的扩展文件名类型,如：string[] allowExtensions = { ".doc", ".xls", ".ppt", ".jpg", ".gif" };</param>
            <param name="maxLength">允许上传的最大大小，以M为单位</param>
            <param name="savePath">保存文件的目录，注意是绝对路径,如：Server.MapPath("~/upload/");</param>
            <param name="gendatedir">是否生成日期文件夹,默认true</param>
            <param name="guidname">是否是GUID名字，默认true</param>
            <param name="savename">保存文件名（不带后缀），如果非空则以此文件名保存</param>
        </member>
        <member name="M:Niunan.Utility.Tool.Upload_MVC(System.Web.HttpPostedFileBase,System.String[],System.Int32,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>上传文件方法，默认生成日期文件夹,MVC使用
            返回文件名
            </summary>
            <param name="PostedFile">mvc后台获取的</param>
            <param name="allowExtensions">允许上传的扩展文件名类型,如：string[] allowExtensions = { ".doc", ".xls", ".ppt", ".jpg", ".gif" };</param>
            <param name="maxLength">允许上传的最大大小，以M为单位</param>
            <param name="savePath">保存文件的目录，注意是绝对路径,如：Server.MapPath("~/upload/");</param>
            <param name="gendatedir">是否生成日期文件夹</param>
            <param name="guidname">是否是GUID名字，默认true</param>
            <param name="savename">保存文件名（不带后缀），如果非空则以此文件名保存</param>
        </member>
        <member name="M:Niunan.Utility.Tool.TxtLog(System.String,System.String)">
            <summary>写日志文件
            
            </summary>
            <param name="logmsg">日记内容</param>
            <param name="absolutefile">绝对路径文件，如：d:/aaa/bbb/ccc/log.txt</param>
        </member>
        <member name="M:Niunan.Utility.Tool.StringTruncat(System.String,System.Int32,System.String)">
              <summary>将指定字符串按指定长度进行剪切  
              
              </summary> 
              <param   name= "oldStr "> 需要截断的字符串 </param> 
              <param   name= "maxLength "> 字符串的最大长度 </param> 
              <param   name= "endWith "> 超过长度的后缀 </param> 
              <returns> 如果超过长度，返回截断后的新字符串加上后缀，否则，返回原字符串 </returns> 
        </member>
        <member name="M:Niunan.Utility.Tool.MoneyToChinese(System.String)">
            <summary>金额转大写
            
            </summary>
            <param name="LowerMoney"></param>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.Tool.DBCToSBC(System.String)">
            <summary>转全角的函数
            
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </summary>
            <param name="input">任意字符串</param>
            <returns>全角字符串</returns>
        </member>
        <member name="M:Niunan.Utility.Tool.SBCToDBC(System.String)">
            <summary>转半角的函数
            
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </summary>
            <param name="input">任意字符串</param>
            <returns>半角字符串</returns>
        </member>
        <member name="M:Niunan.Utility.Tool.EncryptString(System.String,System.String)">
            <summary>
            DES加密
            <param name="txt">要加密的字符串</param>
            <param name="key">密钥，得是8位</param>
            </summary>
        </member>
        <member name="M:Niunan.Utility.Tool.DecryptString(System.String,System.String)">
            <summary>
            DES解密
            <param name="txt">要解密的字符串</param>
            <param name="key">密钥，得是8位</param>
            </summary>
        </member>
        <member name="M:Niunan.Utility.Tool.Encrypt(System.String,System.String)">
            <summary>  
            256位AES加密  
            C++采用OpenSSL加密时，不管明文长度是否正好为16字节的整数倍，都会在末尾填充16字节的0x10（即使十进制的16）
            而明文长度不是16字节的整数倍时，先填充零，再填充16字节的0x10
            <param name="toEncrypt">要加密的字符串</param>
            <param name="key">加密密钥，得是32位</param>
            </summary>   
        </member>
        <member name="M:Niunan.Utility.Tool.Encrypt_byte(System.String,System.String)">
            <summary>
            256位AES加密，返回字节数组
            </summary>
            <param name="toEncrypt"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.Tool.Decrypt(System.String,System.String)">
            <summary>  
            256位AES解密  
            <param name="toDecrypt">要解密的字符串</param>
            <param name="key">密钥，得是32位</param>
            </summary>
        </member>
        <member name="M:Niunan.Utility.Tool.Decrypt_byte(System.Byte[],System.String)">
            <summary>
            256位AES解密，传入字节数组
            </summary>
            <param name="toDecrypt">字节数组</param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.Tool.EncryptString(System.String)">
             <summary>
            加密字符串
             </summary>
             <param name="Value">要加密的字符</param>
             <returns>加密了的字符串</returns>
        </member>
        <member name="M:Niunan.Utility.Tool.DecryptString(System.String)">
            <summary>
            解密字符串
            </summary>
            <param name="Value">要解密字符串</param>
            <returns>解密了的字符串</returns>
        </member>
        <member name="M:Niunan.Utility.Tool.GetChineseSpell(System.String)">
            <summary>获取汉字拼音首字母
            
            </summary>
            <param name="strText"></param>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.Tool.GetWebresourceFile(System.String,System.String)">
            <summary>获取网页源代码
            
            </summary>
            <param name="url">目标网页地址</param>
            <param name="code">如果目标网页是utf-8编码的在此输入utf8，若是gb2312编码的则不用输入</param>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.Tool.GetCheckBoxListValue(System.Web.UI.WebControls.CheckBoxList,System.Char,System.String)">
            <summary>获取CheckBoxList控件选中的值
             默认连接Text
            </summary>
            <param name="chkl">CheckBoxList对象</param>
            <param name="joinstr">连接字符，如,</param>
            <param name="mode">text或者value</param>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.Tool.SetCheckBoxListValue(System.Web.UI.WebControls.CheckBoxList,System.String,System.String)">
            <summary>设置CheckBoxList的值
            
            </summary>
            <param name="chkl">CheckBoxList对象</param>
            <param name="values">字符串</param>
            <param name="mode">text或者value</param>
        </member>
        <member name="M:Niunan.Utility.Tool.SetDropDownListValue(System.Web.UI.WebControls.DropDownList,System.String,System.String)">
            <summary>设置DropDownList的值
            
            </summary>
            <param name="ddl">DDL控件</param>
            <param name="values">要设置的值</param>
            <param name="findtype">查找类型：value,text</param>
        </member>
        <member name="M:Niunan.Utility.Tool.GenHTMLFromURL(System.String,System.String,System.String,System.Boolean)">
            <summary>通过URL生成静态页
            
            </summary>
            <param name="strURL">URL，如：http://localhost:123/aaa.aspx</param>
            <param name="strRealPath">保存的静态页的绝对路径 ，如：Server.MapPath("~/static/aaa.html")</param>
            <param name="strCode">页面编码，空则默认为utf-8，如：gb2312,utf-8</param>
            <param name="isYaSuo">是否压缩HTML，默认否</param>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.Tool.GenHTMLFromTemp(System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String)">
            <summary>生成静态HTML页面
            
            </summary>
            <param name="temppath">模板页面路径，如： Server.MapPath("static/about_temp.html")</param>
            <param name="genfilepath">生成的静态页路径，如：Server.MapPath("static/about.html")</param>
            <param name="sourcestr">模板页中需要替换的字符集合</param>
            <param name="replacestr">替换后的字符集合</param>
            <param name="strcode">页面编码，默认utf-8，如：gb2312,utf-8</param>
        </member>
        <member name="M:Niunan.Utility.Tool.GenRandomCode(System.String,System.Int32)">
            <summary>产生随机字符串
            
            </summary>
            <param name="str">从该字符串中随机选择,如：0123456789</param>
            <param name="num">随机出几个字符</param>
            <returns>随机出的字符串</returns>
        </member>
        <member name="M:Niunan.Utility.Tool.DownloadFile(System.String,System.String,System.Int64)">
            <summary>输出硬盘文件，提供下载
            
            </summary>  
            <param name="_fileName">下载文件名</param>
            <param name="_fullPath">带文件名下载路径</param>
            <param name="_speed">每秒允许下载的字节数</param>
            <returns>返回是否成功</returns>
        </member>
        <member name="M:Niunan.Utility.Tool.RenderDataTableFromExcel(System.String)">
            <summary>从XLS文件读取到DataTable中
            
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.Tool.RenderDataTableFromExcel(System.String,System.Int32)">
            <summary>把excel导入到datatable中，根据sheet的索引
            
            </summary>
            <param name="filepath"></param>
            <param name="sheetnum"></param>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.Tool.RenderDataTableFromExcel(System.String,System.String)">
            <summary>把excel导入到datatable中，根据sheet的名称
            
            </summary>
            <param name="filepath"></param>
            <param name="sheetnum"></param>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.Tool.RenderDataTableToExcel(System.Data.DataTable)">
            <summary>从DataTable中输出XLS数据流，前台下载代码如下：
            DataTable dt = DataTableRenderToExcel.RenderDataTableFromExcel(MapPath("~/bbb.xls"));
               MemoryStream ms = DataTableRenderToExcel.RenderDataTableToExcel(dt) as MemoryStream;
               Response.AddHeader("Content-Disposition", string.Format("attachment; filename=Download.xls"));
               Response.BinaryWrite(ms.ToArray());
               ms.Close();
                ms.Dispose();
            </summary>
            <param name="SourceTable"></param>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.Tool.GetExcelSheet(System.String)">
            <summary>获取Excel文件中sheet的集合
            
            </summary>
            <param name="filepath"></param>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.Tool.MarkWater(System.String,System.String,System.String)">
            <summary> 给图片上水印   
             原图片大小小于水印图片的也直接把水印画上去，水印不会自动缩放
            </summary>   
            <param name="filePath">原图片地址(物理路径)</param>   
            <param name="waterFile">水印图片地址（物理路径）</param>   
            <param name="savepath">保存的图片路径（物理路径）</param>
        </member>
        <member name="T:Niunan.Utility.Totp">
            <summary>
            https://tools.ietf.org/html/rfc6238
            </summary>
        </member>
        <member name="M:Niunan.Utility.Totp.GenerateCode(System.Byte[],System.String)">
            <summary>
            Generates code for the specified <paramref name="securityToken"/>.
            </summary>
            <param name="securityToken">The security token to generate code.</param>
            <param name="modifier">The modifier.</param>
            <returns>The generated code.</returns>
        </member>
        <member name="M:Niunan.Utility.Totp.ValidateCode(System.Byte[],System.Int32,System.String)">
            <summary>
            Validates the code for the specified <paramref name="securityToken"/>.
            </summary>
            <param name="securityToken">The security token for verifying.</param>
            <param name="code">The code to validate.</param>
            <param name="modifier">The modifier</param>
            <returns><c>True</c> if validate succeed, otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Niunan.Utility.Totp.GenerateCode(System.String,System.String)">
            <summary>
            Generates code for the specified <paramref name="securityToken"/>.
            </summary>
            <param name="securityToken">The security token to generate code.</param>
            <param name="modifier">The modifier.</param>
            <returns>The generated code.</returns>
        </member>
        <member name="M:Niunan.Utility.Totp.ValidateCode(System.String,System.Int32,System.String)">
            <summary>
            Validates the code for the specified <paramref name="securityToken"/>.
            </summary>
            <param name="securityToken">The security token for verifying.</param>
            <param name="code">The code to validate.</param>
            <param name="modifier">The modifier</param>
            <returns><c>True</c> if validate succeed, otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Niunan.Utility.TypeChange">
            <summary>
            牛腩写的类型转换
            不想每次类型转换都得 int a = 0; int.TryParse(....,out a)
            </summary>
        </member>
        <member name="M:Niunan.Utility.TypeChange.StringToDouble(System.String,System.Double)">
            <summary>
            字符串转为浮点数
            </summary>
            <param name="str">字符串</param>
            <param name="d">默认值0</param>
            <returns></returns>
        </member>
        <member name="M:Niunan.Utility.TypeChange.StringToInt(System.String,System.Int32)">
            <summary>
            字符串转为整型
            </summary>
            <param name="str">字符串</param>
            <param name="i">默认值0</param>
            <returns></returns>
        </member>
    </members>
</doc>
